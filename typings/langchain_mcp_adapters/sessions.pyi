"""
This type stub file was generated by pyright.
"""

import httpx
from contextlib import asynccontextmanager
from datetime import timedelta
from typing import Any, Literal, Protocol, TYPE_CHECKING
from mcp import ClientSession
from typing_extensions import NotRequired, TypedDict
from collections.abc import AsyncIterator
from pathlib import Path

"""Session management for different MCP transport types.

This module provides connection configurations and session management for various
MCP transport types including stdio, SSE, WebSocket, and streamable HTTP.
"""
if TYPE_CHECKING:
    ...
EncodingErrorHandler = Literal["strict", "ignore", "replace"]
DEFAULT_ENCODING = ...
DEFAULT_ENCODING_ERROR_HANDLER: EncodingErrorHandler = ...
DEFAULT_HTTP_TIMEOUT = ...
DEFAULT_SSE_READ_TIMEOUT = ...
DEFAULT_STREAMABLE_HTTP_TIMEOUT = ...
DEFAULT_STREAMABLE_HTTP_SSE_READ_TIMEOUT = ...
class McpHttpClientFactory(Protocol):
    """Protocol for creating httpx.AsyncClient instances for MCP connections."""
    def __call__(self, headers: dict[str, str] | None = ..., timeout: httpx.Timeout | None = ..., auth: httpx.Auth | None = ...) -> httpx.AsyncClient:
        """Create an httpx.AsyncClient instance.

        Args:
            headers: HTTP headers to include in requests.
            timeout: Request timeout configuration.
            auth: Authentication configuration.

        Returns:
            Configured httpx.AsyncClient instance.
        """
        ...
    


class StdioConnection(TypedDict):
    """Configuration for stdio transport connections to MCP servers."""
    transport: Literal["stdio"]
    command: str
    args: list[str]
    env: NotRequired[dict[str, str] | None]
    cwd: NotRequired[str | Path | None]
    encoding: NotRequired[str]
    encoding_error_handler: NotRequired[EncodingErrorHandler]
    session_kwargs: NotRequired[dict[str, Any] | None]
    ...


class SSEConnection(TypedDict):
    """Configuration for Server-Sent Events (SSE) transport connections to MCP."""
    transport: Literal["sse"]
    url: str
    headers: NotRequired[dict[str, Any] | None]
    timeout: NotRequired[float]
    sse_read_timeout: NotRequired[float]
    session_kwargs: NotRequired[dict[str, Any] | None]
    httpx_client_factory: NotRequired[McpHttpClientFactory | None]
    auth: NotRequired[httpx.Auth]
    ...


class StreamableHttpConnection(TypedDict):
    """Connection configuration for Streamable HTTP transport."""
    transport: Literal["streamable_http"]
    url: str
    headers: NotRequired[dict[str, Any] | None]
    timeout: NotRequired[timedelta]
    sse_read_timeout: NotRequired[timedelta]
    terminate_on_close: NotRequired[bool]
    session_kwargs: NotRequired[dict[str, Any] | None]
    httpx_client_factory: NotRequired[McpHttpClientFactory | None]
    auth: NotRequired[httpx.Auth]
    ...


class WebsocketConnection(TypedDict):
    """Configuration for WebSocket transport connections to MCP servers."""
    transport: Literal["websocket"]
    url: str
    session_kwargs: NotRequired[dict[str, Any] | None]
    ...


Connection = (StdioConnection | SSEConnection | StreamableHttpConnection | WebsocketConnection)
@asynccontextmanager
async def create_session(connection: Connection) -> AsyncIterator[ClientSession]:
    """Create a new session to an MCP server.

    Args:
        connection: Connection config to use to connect to the server

    Raises:
        ValueError: If transport is not recognized
        ValueError: If required parameters for the specified transport are missing

    Yields:
        A ClientSession
    """
    ...

